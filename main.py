import sys
import random
import string
import hashlib
import base64
import json
import os
from datetime import datetime
from PySide6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
                               QLabel, QLineEdit, QPushButton, QFrame, QGridLayout, 
                               QStackedWidget, QMessageBox, QProgressBar, QListWidget,
                               QSizePolicy, QListWidgetItem, QGraphicsOpacityEffect, 
                               QGraphicsDropShadowEffect, QTextEdit, QCheckBox, QSlider,
                               QComboBox, QTabWidget, QSplitter, QGroupBox, QScrollArea)
from PySide6.QtGui import (QColor, QPainter, QPen, QBrush, QLinearGradient, QFont, 
                           QPalette, QPixmap, QIcon)
from PySide6.QtCore import (Qt, Slot, QTimer, QTime, QPropertyAnimation, QEasingCurve, 
                            QRect, QParallelAnimationGroup, QSequentialAnimationGroup,
                            QThread, Signal)
from crypto_utils import (encrypt_aes, decrypt_aes, create_hash, verify_hash,
                          encrypt_vigenere, decrypt_vigenere, encrypt_caesar, decrypt_caesar,
                          generate_strong_password, check_password_strength,
                          detect_phishing_url, detect_phishing_email,
                          find_hash_prefix_collision)

class AnimatedBackground(QWidget):
    """Widget n·ªÅn v·ªõi hi·ªáu ·ª©ng ƒë·ªông gradient v√† particles"""
    def __init__(self, parent=None):
        super().__init__(parent)
        self.particles = []
        self.init_particles()
        self.gradient_offset = 0
        
        # Timer cho animation
        self.animation_timer = QTimer(self)
        self.animation_timer.timeout.connect(self.update_animation)
        self.animation_timer.start(50)  # 50ms refresh rate
        
        self.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)

    def init_particles(self):
        """Kh·ªüi t·∫°o c√°c particles cho hi·ªáu ·ª©ng n·ªÅn"""
        for _ in range(50):
            particle = {
                'x': random.randint(0, 1920),
                'y': random.randint(0, 1080),
                'size': random.randint(1, 3),
                'speed_x': random.uniform(-0.5, 0.5),
                'speed_y': random.uniform(-0.5, 0.5),
                'opacity': random.randint(30, 100)
            }
            self.particles.append(particle)

    def paintEvent(self, event):
        painter = QPainter(self)
        painter.setRenderHint(QPainter.Antialiasing)
        
        # Gradient n·ªÅn ƒë·ªông
        gradient = QLinearGradient(0, 0, self.width(), self.height())
        gradient.setColorAt(0, QColor(15, 32, 62))  # Xanh ƒë·∫≠m
        gradient.setColorAt(0.5, QColor(25, 55, 109))  # Xanh ng√¢n h√†ng
        gradient.setColorAt(1, QColor(35, 47, 68))  # X√°m xanh
        
        painter.fillRect(self.rect(), gradient)
        
        # V·∫Ω particles
        for particle in self.particles:
            painter.setBrush(QBrush(QColor(255, 215, 0, particle['opacity'])))
            painter.setPen(Qt.NoPen)
            painter.drawEllipse(int(particle['x']), int(particle['y']), 
                              particle['size'], particle['size'])

    def update_animation(self):
        """C·∫≠p nh·∫≠t v·ªã tr√≠ particles"""
        for particle in self.particles:
            particle['x'] += particle['speed_x']
            particle['y'] += particle['speed_y']
            
            # Reset particle khi ra kh·ªèi m√†n h√¨nh
            if particle['x'] < 0 or particle['x'] > self.width():
                particle['x'] = random.randint(0, self.width())
            if particle['y'] < 0 or particle['y'] > self.height():
                particle['y'] = random.randint(0, self.height())
        
        self.update()

class GameStatsWidget(QWidget):
    """Widget hi·ªÉn th·ªã th·ªëng k√™ game"""
    def __init__(self, parent=None):
        super().__init__(parent)
        self.init_ui()
        
    def init_ui(self):
        layout = QGridLayout(self)
        
        # T·∫°o c√°c stat cards
        stats = [
            ("üìä", "T·ªïng ƒêi·ªÉm", "totalScore", 0),
            ("üéØ", "Level", "currentLevel", 1),
            ("üîí", "Giao D·ªãch", "completedTransactions", 0),
            ("üèÜ", "Th√†nh T√≠ch", "achievements", 0),
            ("‚≠ê", "Chu·ªói Th·∫Øng", "streak", 0)
        ]
        
        self.stat_labels = {}
        
        for i, (icon, label, key, default_value) in enumerate(stats):
            frame = self.create_stat_card(icon, label, default_value)
            self.stat_labels[key] = frame.findChild(QLabel, "value")
            layout.addWidget(frame, 0, i)
            
    def create_stat_card(self, icon, label, value):
        frame = QFrame()
        frame.setObjectName("StatCard")
        frame.setFixedSize(150, 120)
        
        layout = QVBoxLayout(frame)
        
        icon_label = QLabel(icon)
        icon_label.setAlignment(Qt.AlignCenter)
        icon_label.setStyleSheet("font-size: 32px; margin-bottom: 10px;")
        
        value_label = QLabel(str(value))
        value_label.setObjectName("value")
        value_label.setAlignment(Qt.AlignCenter)
        value_label.setStyleSheet("font-size: 24px; font-weight: bold; color: #FFD700; margin-bottom: 5px;")
        
        label_label = QLabel(label)
        label_label.setAlignment(Qt.AlignCenter)
        label_label.setStyleSheet("font-size: 12px; color: #b0bec5;")
        
        layout.addWidget(icon_label)
        layout.addWidget(value_label)
        layout.addWidget(label_label)
        
        return frame
        
    def update_stats(self, stats):
        """C·∫≠p nh·∫≠t hi·ªÉn th·ªã th·ªëng k√™"""
        for key, value in stats.items():
            if key in self.stat_labels:
                self.stat_labels[key].setText(str(value))

class PasswordGameWidget(QWidget):
    """Mini game t·∫°o m·∫≠t kh·∫©u m·∫°nh"""
    def __init__(self, game_manager):
        super().__init__()
        self.game_manager = game_manager
        self.init_ui()
        
    def init_ui(self):
        layout = QVBoxLayout(self)
        
        # Title
        title = QLabel("üîê Game T·∫°o M·∫≠t Kh·∫©u M·∫°nh")
        title.setObjectName("PanelTitle")
        layout.addWidget(title)
        
        # Password input
        input_group = QGroupBox("Nh·∫≠p m·∫≠t kh·∫©u c·ªßa b·∫°n:")
        input_layout = QVBoxLayout(input_group)
        
        self.password_input = QLineEdit()
        self.password_input.setEchoMode(QLineEdit.Password)
        self.password_input.textChanged.connect(self.check_password_strength)
        input_layout.addWidget(self.password_input)
        
        # Show/Hide button
        show_btn = QPushButton("üëÅÔ∏è Hi·ªán/·∫®n")
        show_btn.clicked.connect(self.toggle_password_visibility)
        input_layout.addWidget(show_btn)
        
        layout.addWidget(input_group)
        
        # Strength meter
        self.strength_bar = QProgressBar()
        self.strength_bar.setMaximum(100)
        layout.addWidget(self.strength_bar)
        
        # Feedback
        self.feedback_label = QLabel()
        self.feedback_label.setWordWrap(True)
        layout.addWidget(self.feedback_label)
        
        # Password generator
        generator_group = QGroupBox("T·∫°o m·∫≠t kh·∫©u t·ª± ƒë·ªông:")
        generator_layout = QVBoxLayout(generator_group)
        
        # Options
        options_layout = QHBoxLayout()
        self.include_upper = QCheckBox("Ch·ªØ hoa")
        self.include_lower = QCheckBox("Ch·ªØ th∆∞·ªùng") 
        self.include_numbers = QCheckBox("S·ªë")
        self.include_symbols = QCheckBox("K√Ω t·ª± ƒë·∫∑c bi·ªát")
        
        for checkbox in [self.include_upper, self.include_lower, self.include_numbers, self.include_symbols]:
            checkbox.setChecked(True)
            options_layout.addWidget(checkbox)
            
        generator_layout.addLayout(options_layout)
        
        # Length slider
        length_layout = QHBoxLayout()
        length_layout.addWidget(QLabel("ƒê·ªô d√†i:"))
        self.length_slider = QSlider(Qt.Horizontal)
        self.length_slider.setMinimum(8)
        self.length_slider.setMaximum(32)
        self.length_slider.setValue(12)
        self.length_slider.valueChanged.connect(self.update_length_display)
        length_layout.addWidget(self.length_slider)
        
        self.length_display = QLabel("12")
        length_layout.addWidget(self.length_display)
        
        generator_layout.addLayout(length_layout)
        
        # Generate button
        generate_btn = QPushButton("üé≤ T·∫°o m·∫≠t kh·∫©u")
        generate_btn.clicked.connect(self.generate_password)
        generator_layout.addWidget(generate_btn)
        
        # Generated password
        self.generated_password = QLineEdit()
        self.generated_password.setReadOnly(True)
        generator_layout.addWidget(self.generated_password)
        
        layout.addWidget(generator_group)
        
        # Challenge section
        challenge_group = QGroupBox("üèÜ Th·ª≠ th√°ch m·∫≠t kh·∫©u:")
        challenge_layout = QVBoxLayout(challenge_group)
        
        self.challenge_label = QLabel()
        self.challenge_label.setWordWrap(True)
        challenge_layout.addWidget(self.challenge_label)
        
        challenge_btn = QPushButton("üéØ B·∫Øt ƒë·∫ßu th·ª≠ th√°ch")
        challenge_btn.clicked.connect(self.start_challenge)
        challenge_layout.addWidget(challenge_btn)
        
        layout.addWidget(challenge_group)
        
        # Start first challenge
        self.start_challenge()
        
    def toggle_password_visibility(self):
        if self.password_input.echoMode() == QLineEdit.Password:
            self.password_input.setEchoMode(QLineEdit.Normal)
        else:
            self.password_input.setEchoMode(QLineEdit.Password)
            
    def check_password_strength(self):
        password = self.password_input.text()
        if not password:
            self.strength_bar.setValue(0)
            self.feedback_label.setText("")
            return
            
        result = check_password_strength(password)
        self.strength_bar.setValue(result['score'])
        
        # Update color based on strength
        if result['score'] >= 80:
            self.strength_bar.setStyleSheet("QProgressBar::chunk { background-color: #28a745; }")
        elif result['score'] >= 60:
            self.strength_bar.setStyleSheet("QProgressBar::chunk { background-color: #ffc107; }")
        elif result['score'] >= 40:
            self.strength_bar.setStyleSheet("QProgressBar::chunk { background-color: #fd7e14; }")
        else:
            self.strength_bar.setStyleSheet("QProgressBar::chunk { background-color: #dc3545; }")
            
        feedback_text = f"ƒê·ªô m·∫°nh: {result['strength']} ({result['score']}/100)\n"
        if result['feedback']:
            feedback_text += "C·∫ßn c·∫£i thi·ªán:\n" + "\n".join(f"‚Ä¢ {fb}" for fb in result['feedback'])
        else:
            feedback_text += "‚úÖ M·∫≠t kh·∫©u r·∫•t t·ªët!"
            
        self.feedback_label.setText(feedback_text)
        
    def update_length_display(self):
        self.length_display.setText(str(self.length_slider.value()))
        
    def generate_password(self):
        length = self.length_slider.value()
        include_symbols = self.include_symbols.isChecked()
        include_numbers = self.include_numbers.isChecked()
        include_uppercase = self.include_upper.isChecked()
        include_lowercase = self.include_lower.isChecked()
        
        password = generate_strong_password(
            length, include_symbols, include_numbers, 
            include_uppercase, include_lowercase
        )
        
        self.generated_password.setText(password)
        self.game_manager.add_score(15, "T·∫°o m·∫≠t kh·∫©u m·∫°nh")
        
    def start_challenge(self):
        challenges = [
            "T·∫°o m·∫≠t kh·∫©u c√≥ √≠t nh·∫•t 10 k√Ω t·ª± v·ªõi ch·ªØ hoa, ch·ªØ th∆∞·ªùng v√† s·ªë",
            "T·∫°o m·∫≠t kh·∫©u m·∫°nh kh√¥ng ch·ª©a t·ª´ trong t·ª´ ƒëi·ªÉn", 
            "T·∫°o m·∫≠t kh·∫©u c√≥ √≠t nh·∫•t 12 k√Ω t·ª± v·ªõi t·∫•t c·∫£ lo·∫°i k√Ω t·ª±",
            "T·∫°o m·∫≠t kh·∫©u d·ªÖ nh·ªõ nh∆∞ng kh√≥ ƒëo√°n"
        ]
        
        challenge = random.choice(challenges)
        self.challenge_label.setText(f"Th·ª≠ th√°ch: {challenge}")

class CryptoPuzzleWidget(QWidget):
    """Mini game gi·∫£i m√£ crypto"""
    def __init__(self, game_manager):
        super().__init__()
        self.game_manager = game_manager
        self.current_puzzle = None
        self.init_ui()
        
    def init_ui(self):
        layout = QVBoxLayout(self)
        
        # Title
        title = QLabel("üß© Game Gi·∫£i M√£ Crypto")
        title.setObjectName("PanelTitle")
        layout.addWidget(title)
        
        # Cipher type selection
        type_layout = QHBoxLayout()
        type_layout.addWidget(QLabel("Ch·ªçn lo·∫°i m√£ h√≥a:"))
        self.cipher_combo = QComboBox()
        self.cipher_combo.addItems(["Caesar Cipher", "Vigenere Cipher", "Reverse Text", "Base64"])
        self.cipher_combo.currentTextChanged.connect(self.generate_puzzle)
        type_layout.addWidget(self.cipher_combo)
        layout.addLayout(type_layout)
        
        # Encrypted text
        self.encrypted_text = QTextEdit()
        self.encrypted_text.setMaximumHeight(100)
        self.encrypted_text.setReadOnly(True)
        layout.addWidget(QLabel("VƒÉn b·∫£n ƒë√£ m√£ h√≥a:"))
        layout.addWidget(self.encrypted_text)
        
        # Hint
        self.hint_label = QLabel()
        self.hint_label.setStyleSheet("color: #FFD700; font-style: italic;")
        layout.addWidget(self.hint_label)
        
        # Solution input
        layout.addWidget(QLabel("Nh·∫≠p k·∫øt qu·∫£ gi·∫£i m√£:"))
        self.solution_input = QTextEdit()
        self.solution_input.setMaximumHeight(100)
        layout.addWidget(self.solution_input)
        
        # Buttons
        button_layout = QHBoxLayout()
        
        new_puzzle_btn = QPushButton("üé≤ T·∫°o c√¢u ƒë·ªë m·ªõi")
        new_puzzle_btn.clicked.connect(self.generate_puzzle)
        button_layout.addWidget(new_puzzle_btn)
        
        check_btn = QPushButton("‚úÖ Ki·ªÉm tra")
        check_btn.clicked.connect(self.check_solution)
        button_layout.addWidget(check_btn)
        
        hint_btn = QPushButton("üí° G·ª£i √Ω")
        hint_btn.clicked.connect(self.show_hint)
        button_layout.addWidget(hint_btn)
        
        layout.addLayout(button_layout)
        
        # Result
        self.result_label = QLabel()
        self.result_label.setWordWrap(True)
        layout.addWidget(self.result_label)
        
        # Generate first puzzle
        self.generate_puzzle()
        
    def generate_puzzle(self):
        cipher_type = self.cipher_combo.currentText()
        
        texts = [
            "HELLO WORLD",
            "SECURITY FIRST", 
            "CRYPTOGRAPHY IS AMAZING",
            "PROTECT YOUR DATA",
            "BLOCKCHAIN TECHNOLOGY"
        ]
        
        original_text = random.choice(texts)
        
        if cipher_type == "Caesar Cipher":
            shift = random.randint(1, 25)
            encrypted = self.caesar_encrypt(original_text, shift)
            hint = f"Caesar cipher v·ªõi shift = {shift}"
        elif cipher_type == "Vigenere Cipher":
            key = random.choice(["BANK", "SAFE", "GOLD", "LOCK"])
            encrypted = encrypt_vigenere(original_text, key)
            hint = f"Vigenere cipher v·ªõi kh√≥a = {key}"
        elif cipher_type == "Reverse Text":
            encrypted = original_text[::-1]
            hint = "VƒÉn b·∫£n ƒë√£ ƒë∆∞·ª£c ƒë·∫£o ng∆∞·ª£c"
        else:  # Base64
            encrypted = base64.b64encode(original_text.encode()).decode()
            hint = "D·ªØ li·ªáu ƒë∆∞·ª£c m√£ h√≥a Base64"
            
        self.current_puzzle = {
            'original': original_text,
            'encrypted': encrypted,
            'hint': hint,
            'type': cipher_type
        }
        
        self.encrypted_text.setText(encrypted)
        self.hint_label.setText("")
        self.solution_input.setText("")
        self.result_label.setText("")
        
    def caesar_encrypt(self, text, shift):
        result = ""
        for char in text:
            if char.isalpha():
                ascii_offset = ord('A') if char.isupper() else ord('a')
                shifted = (ord(char) - ascii_offset + shift) % 26
                result += chr(shifted + ascii_offset)
            else:
                result += char
        return result
        
    def check_solution(self):
        if not self.current_puzzle:
            return
            
        user_solution = self.solution_input.toPlainText().upper().strip()
        correct_solution = self.current_puzzle['original'].upper()
        
        if user_solution == correct_solution:
            self.result_label.setText(f"üéâ Ch√≠nh x√°c! B·∫°n ƒë√£ gi·∫£i m√£ th√†nh c√¥ng: {correct_solution}")
            self.result_label.setStyleSheet("color: #28a745; font-weight: bold;")
            self.game_manager.add_score(30, "Gi·∫£i m√£ th√†nh c√¥ng")
        else:
            self.result_label.setText(f"‚ùå Ch∆∞a ƒë√∫ng. K·∫øt qu·∫£ c·ªßa b·∫°n: {user_solution}\nH√£y th·ª≠ l·∫°i ho·∫∑c xem g·ª£i √Ω!")
            self.result_label.setStyleSheet("color: #dc3545;")
            
    def show_hint(self):
        if self.current_puzzle:
            self.hint_label.setText(self.current_puzzle['hint'])
            self.game_manager.add_score(5, "Xem g·ª£i √Ω")

class HashRaceWidget(QWidget):
    """Mini game Hash Race"""
    def __init__(self, game_manager):
        super().__init__()
        self.game_manager = game_manager
        self.race_active = False
        self.attempts = 0
        self.successes = 0
        self.start_time = None
        self.target_prefix = "00"
        self.init_ui()
        
    def init_ui(self):
        layout = QVBoxLayout(self)
        
        # Title
        title = QLabel("‚ö° Game Hash Race")
        title.setObjectName("PanelTitle")
        layout.addWidget(title)
        
        # Challenge display
        challenge_group = QGroupBox("üéØ Th·ª≠ th√°ch hi·ªán t·∫°i:")
        challenge_layout = QVBoxLayout(challenge_group)
        
        self.challenge_label = QLabel(f"T√¨m chu·ªói c√≥ hash SHA-256 b·∫Øt ƒë·∫ßu b·∫±ng: {self.target_prefix}")
        challenge_layout.addWidget(self.challenge_label)
        
        layout.addWidget(challenge_group)
        
        # Timer
        self.timer_label = QLabel("00:00")
        self.timer_label.setAlignment(Qt.AlignCenter)
        self.timer_label.setStyleSheet("font-size: 24px; color: #FFD700; font-weight: bold;")
        layout.addWidget(self.timer_label)
        
        # Input
        layout.addWidget(QLabel("Nh·∫≠p chu·ªói ƒë·ªÉ th·ª≠:"))
        self.hash_input = QLineEdit()
        layout.addWidget(self.hash_input)
        
        # Hash result
        layout.addWidget(QLabel("Hash SHA-256:"))
        self.hash_result = QLineEdit()
        self.hash_result.setReadOnly(True)
        layout.addWidget(self.hash_result)
        
        # Buttons
        button_layout = QHBoxLayout()
        
        calculate_btn = QPushButton("üî® T√≠nh Hash")
        calculate_btn.clicked.connect(self.calculate_hash)
        button_layout.addWidget(calculate_btn)
        
        start_btn = QPushButton("üèÅ B·∫Øt ƒë·∫ßu cu·ªôc ƒëua")
        start_btn.clicked.connect(self.start_race)
        button_layout.addWidget(start_btn)
        
        auto_btn = QPushButton("ü§ñ T√¨m ki·∫øm t·ª± ƒë·ªông")
        auto_btn.clicked.connect(self.auto_search)
        button_layout.addWidget(auto_btn)
        
        stop_btn = QPushButton("‚èπÔ∏è D·ª´ng")
        stop_btn.clicked.connect(self.stop_race)
        button_layout.addWidget(stop_btn)
        
        layout.addLayout(button_layout)
        
        # Stats
        stats_group = QGroupBox("üìä Th·ªëng k√™:")
        stats_layout = QGridLayout(stats_group)
        
        self.attempts_label = QLabel("0")
        self.successes_label = QLabel("0")
        self.best_time_label = QLabel("--")
        self.hash_rate_label = QLabel("0")
        
        stats_layout.addWidget(QLabel("L·∫ßn th·ª≠:"), 0, 0)
        stats_layout.addWidget(self.attempts_label, 0, 1)
        stats_layout.addWidget(QLabel("Th√†nh c√¥ng:"), 0, 2)
        stats_layout.addWidget(self.successes_label, 0, 3)
        stats_layout.addWidget(QLabel("Th·ªùi gian t·ªët nh·∫•t:"), 1, 0)
        stats_layout.addWidget(self.best_time_label, 1, 1)
        stats_layout.addWidget(QLabel("Hash/gi√¢y:"), 1, 2)
        stats_layout.addWidget(self.hash_rate_label, 1, 3)
        
        layout.addWidget(stats_group)
        
        # Success history
        self.history_list = QListWidget()
        self.history_list.setMaximumHeight(150)
        layout.addWidget(QLabel("üèÜ L·ªãch s·ª≠ th√†nh c√¥ng:"))
        layout.addWidget(self.history_list)
        
        # Timer for updates
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_timer)
        
    def start_race(self):
        self.race_active = True
        self.attempts = 0
        self.start_time = datetime.now()
        
        # Generate new target
        prefixes = ['0', '00', '000', '1', '11', 'a', 'ab', 'ff']
        self.target_prefix = random.choice(prefixes)
        self.challenge_label.setText(f"T√¨m chu·ªói c√≥ hash SHA-256 b·∫Øt ƒë·∫ßu b·∫±ng: {self.target_prefix}")
        
        self.timer.start(1000)
        self.game_manager.show_notification(f"Hash Race b·∫Øt ƒë·∫ßu! T√¨m hash b·∫Øt ƒë·∫ßu b·∫±ng '{self.target_prefix}'")
        
    def stop_race(self):
        self.race_active = False
        self.timer.stop()
        
    def calculate_hash(self):
        input_text = self.hash_input.text()
        if not input_text:
            return
            
        hash_result = create_hash(input_text)
        self.hash_result.setText(hash_result)
        
        if self.race_active:
            self.attempts += 1
            
            if hash_result.startswith(self.target_prefix):
                # Success!
                self.successes += 1
                elapsed = (datetime.now() - self.start_time).total_seconds()
                
                self.game_manager.add_score(50 + len(self.target_prefix) * 20, "T√¨m th·∫•y hash collision")
                self.game_manager.show_notification(f"üéâ T√¨m th·∫•y! Hash: {hash_result}")
                
                # Add to history
                item = QListWidgetItem(f"{input_text} ‚Üí {hash_result[:16]}... (Th·ªùi gian: {elapsed:.2f}s)")
                self.history_list.addItem(item)
                
                # Start new challenge
                QTimer.singleShot(2000, self.start_race)
                
            self.update_stats()
            
    def auto_search(self):
        if self.race_active:
            random_string = ''.join(random.choices(string.ascii_lowercase + string.digits, k=10))
            self.hash_input.setText(random_string)
            self.calculate_hash()
            QTimer.singleShot(100, self.auto_search)
            
    def update_timer(self):
        if self.start_time:
            elapsed = (datetime.now() - self.start_time).total_seconds()
            minutes = int(elapsed // 60)
            seconds = int(elapsed % 60)
            self.timer_label.setText(f"{minutes:02d}:{seconds:02d}")
            
    def update_stats(self):
        self.attempts_label.setText(str(self.attempts))
        self.successes_label.setText(str(self.successes))
        
        if self.start_time:
            elapsed = (datetime.now() - self.start_time).total_seconds()
            if elapsed > 0:
                rate = self.attempts / elapsed
                self.hash_rate_label.setText(f"{rate:.1f}")

class NetworkSecurityWidget(QWidget):
    """Mini game b·∫£o m·∫≠t m·∫°ng"""
    def __init__(self, game_manager):
        super().__init__()
        self.game_manager = game_manager
        self.network_nodes = []
        self.game_active = False
        self.init_ui()
        
    def init_ui(self):
        layout = QVBoxLayout(self)
        
        # Title
        title = QLabel("üåê Game B·∫£o M·∫≠t M·∫°ng")
        title.setObjectName("PanelTitle")
        layout.addWidget(title)
        
        # Network grid
        grid_group = QGroupBox("üñ•Ô∏è M·∫°ng m√°y t√≠nh c·ªßa b·∫°n:")
        grid_layout = QVBoxLayout(grid_group)
        
        self.network_grid = QGridLayout()
        grid_widget = QWidget()
        grid_widget.setLayout(self.network_grid)
        grid_layout.addWidget(grid_widget)
        
        layout.addWidget(grid_group)
        
        # Status
        status_layout = QHBoxLayout()
        self.safe_label = QLabel("üü¢ An to√†n: 0")
        self.infected_label = QLabel("üî¥ B·ªã nhi·ªÖm: 0")
        self.protected_label = QLabel("üõ°Ô∏è ƒê∆∞·ª£c b·∫£o v·ªá: 0")
        
        status_layout.addWidget(self.safe_label)
        status_layout.addWidget(self.infected_label)
        status_layout.addWidget(self.protected_label)
        
        layout.addLayout(status_layout)
        
        # Tools
        tools_group = QGroupBox("C√¥ng c·ª• b·∫£o m·∫≠t:")
        tools_layout = QHBoxLayout(tools_group)
        
        firewall_btn = QPushButton("üî• Tri·ªÉn khai Firewall")
        firewall_btn.clicked.connect(self.deploy_firewall)
        tools_layout.addWidget(firewall_btn)
        
        antivirus_btn = QPushButton("üõ°Ô∏è C√†i Antivirus")
        antivirus_btn.clicked.connect(self.install_antivirus)
        tools_layout.addWidget(antivirus_btn)
        
        update_btn = QPushButton("‚ö° C·∫≠p nh·∫≠t B·∫£o m·∫≠t")
        update_btn.clicked.connect(self.update_security)
        tools_layout.addWidget(update_btn)
        
        layout.addWidget(tools_group)
        
        # Game controls
        controls_layout = QHBoxLayout()
        
        attack_btn = QPushButton("‚ö†Ô∏è M√¥ ph·ªèng t·∫•n c√¥ng")
        attack_btn.clicked.connect(self.simulate_attack)
        controls_layout.addWidget(attack_btn)
        
        start_btn = QPushButton("üéÆ B·∫Øt ƒë·∫ßu game")
        start_btn.clicked.connect(self.start_game)
        controls_layout.addWidget(start_btn)
        
        reset_btn = QPushButton("üîÑ Reset m·∫°ng")
        reset_btn.clicked.connect(self.reset_network)
        controls_layout.addWidget(reset_btn)
        
        layout.addLayout(controls_layout)
        
        # Initialize network
        self.create_network()
        
    def create_network(self):
        # Clear existing grid
        for i in reversed(range(self.network_grid.count())):
            self.network_grid.itemAt(i).widget().setParent(None)
            
        self.network_nodes = []
        
        # Create 5x5 grid of nodes
        for row in range(5):
            for col in range(5):
                node_id = row * 5 + col
                button = QPushButton(str(node_id + 1))
                button.setFixedSize(60, 60)
                button.clicked.connect(lambda checked, id=node_id: self.click_node(id))
                
                node = {
                    'id': node_id,
                    'status': 'safe',  # safe, infected, protected
                    'button': button
                }
                
                self.network_nodes.append(node)
                self.network_grid.addWidget(button, row, col)
                
        self.update_display()
        
    def click_node(self, node_id):
        node = self.network_nodes[node_id]
        
        if node['status'] == 'infected':
            # Clean infected node
            node['status'] = 'safe'
            self.game_manager.add_score(20, f"L√†m s·∫°ch m√°y t√≠nh {node_id + 1}")
            self.game_manager.show_notification(f"ƒê√£ l√†m s·∫°ch m√°y t√≠nh {node_id + 1}!")
            
        self.update_display()
        
    def deploy_firewall(self):
        safe_nodes = [n for n in self.network_nodes if n['status'] == 'safe']
        if safe_nodes:
            node = random.choice(safe_nodes)
            node['status'] = 'protected'
            self.game_manager.add_score(10, "Tri·ªÉn khai Firewall")
            self.update_display()
            
    def install_antivirus(self):
        infected_nodes = [n for n in self.network_nodes if n['status'] == 'infected']
        if infected_nodes:
            node = random.choice(infected_nodes)
            node['status'] = 'safe'
            self.game_manager.add_score(25, "C√†i Antivirus")
        else:
            safe_nodes = [n for n in self.network_nodes if n['status'] == 'safe']
            if safe_nodes:
                node = random.choice(safe_nodes)
                node['status'] = 'protected'
                self.game_manager.add_score(10, "C√†i Antivirus b·∫£o v·ªá")
        self.update_display()
        
    def update_security(self):
        self.game_manager.add_score(15, "C·∫≠p nh·∫≠t b·∫£o m·∫≠t")
        self.game_manager.show_notification("H·ªá th·ªëng b·∫£o m·∫≠t ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!")
        
    def simulate_attack(self):
        for i in range(3):
            QTimer.singleShot(i * 1000, self.random_attack)
            
    def random_attack(self):
        safe_nodes = [n for n in self.network_nodes if n['status'] == 'safe']
        if safe_nodes:
            target = random.choice(safe_nodes)
            
            # Check for protected neighbors
            neighbors = self.get_neighbors(target['id'])
            protected_neighbors = [n for n in neighbors if self.network_nodes[n]['status'] == 'protected']
            
            if protected_neighbors and random.random() < 0.7:
                # Attack blocked
                self.game_manager.add_score(15, "Ch·∫∑n t·∫•n c√¥ng")
                self.game_manager.show_notification(f"Ch·∫∑n t·∫•n c√¥ng v√†o m√°y {target['id'] + 1}!")
            else:
                # Attack successful
                target['status'] = 'infected'
                self.game_manager.show_notification(f"M√°y {target['id'] + 1} b·ªã nhi·ªÖm!", error=True)
                
        self.update_display()
        
    def get_neighbors(self, node_id):
        neighbors = []
        row = node_id // 5
        col = node_id % 5
        
        # Check adjacent nodes
        for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            new_row, new_col = row + dr, col + dc
            if 0 <= new_row < 5 and 0 <= new_col < 5:
                neighbors.append(new_row * 5 + new_col)
                
        return neighbors
        
    def start_game(self):
        self.game_active = True
        self.attack_timer = QTimer()
        self.attack_timer.timeout.connect(self.random_attack)
        self.attack_timer.start(3000)  # Attack every 3 seconds
        
    def reset_network(self):
        if hasattr(self, 'attack_timer'):
            self.attack_timer.stop()
        self.game_active = False
        self.create_network()
        
    def update_display(self):
        safe_count = infected_count = protected_count = 0
        
        for node in self.network_nodes:
            button = node['button']
            
            if node['status'] == 'safe':
                button.setStyleSheet("background-color: #28a745; color: white;")
                safe_count += 1
            elif node['status'] == 'infected':
                button.setStyleSheet("background-color: #dc3545; color: white; animation: pulse 1s infinite;")
                infected_count += 1
            elif node['status'] == 'protected':
                button.setStyleSheet("background-color: #007bff; color: white;")
                protected_count += 1
                
        self.safe_label.setText(f"üü¢ An to√†n: {safe_count}")
        self.infected_label.setText(f"üî¥ B·ªã nhi·ªÖm: {infected_count}")
        self.protected_label.setText(f"üõ°Ô∏è ƒê∆∞·ª£c b·∫£o v·ªá: {protected_count}")

class BankSecurityGame(QMainWindow):
    """Game b·∫£o m·∫≠t ng√¢n h√†ng ch√≠nh"""
    
    def __init__(self):
        super().__init__()
        self.game_state = {
            'totalScore': 0,
            'currentLevel': 1,
            'completedTransactions': 0,
            'achievements': 0,
            'streak': 0,
            'currentAESKey': '',
            'currentOTP': '',
            'transactionHistory': []
        }
        
        self.init_ui()
        self.load_stylesheet()
        self.load_game_state()
        
    def init_ui(self):
        """Kh·ªüi t·∫°o giao di·ªán ng∆∞·ªùi d√πng"""
        self.setWindowTitle("üè¶ SecureBank Pro - Game B·∫£o m·∫≠t Ng√¢n h√†ng")
        self.setMinimumSize(1024, 700)

        
        # Central widget v·ªõi background
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # Background
        self.background = AnimatedBackground(central_widget)
        
        # Main layout
        main_layout = QVBoxLayout(central_widget)
        
        # Header
        header_frame = self.create_header()
        main_layout.addWidget(header_frame)
        
        # Stats panel
        self.stats_widget = GameStatsWidget()
        main_layout.addWidget(self.stats_widget)
        
        # Tab widget for different games
        self.tab_widget = QTabWidget()
        self.setup_tabs()
        main_layout.addWidget(self.tab_widget)
        
        # Update stats display
        self.update_stats_display()
        
    def create_header(self):
        """T·∫°o header v·ªõi th√¥ng tin game"""
        header_frame = QFrame()
        header_frame.setObjectName("GameHeader")
        header_frame.setFixedHeight(120)
        
        layout = QVBoxLayout(header_frame)
        
        # Title
        title = QLabel("üè¶ SecureBank Pro")
        title.setObjectName("GameTitle")
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)
        
        # Subtitle
        subtitle = QLabel("Game B·∫£o m·∫≠t Ng√¢n h√†ng Chuy√™n nghi·ªáp v·ªõi 6 Mini Games")
        subtitle.setObjectName("GameSubtitle")
        subtitle.setAlignment(Qt.AlignCenter)
        layout.addWidget(subtitle)
        
        return header_frame
        
    def setup_tabs(self):
        """Thi·∫øt l·∫≠p c√°c tab cho mini games"""
        
        # Main banking game
        main_game = self.create_main_game_tab()
        self.tab_widget.addTab(main_game, "üè¶ Game Ch√≠nh")
        
        # Mini games
        password_game = PasswordGameWidget(self)
        self.tab_widget.addTab(password_game, "üîê M·∫≠t Kh·∫©u")
        
        crypto_puzzle = CryptoPuzzleWidget(self)
        self.tab_widget.addTab(crypto_puzzle, "üß© Crypto Puzzle")
        
        hash_race = HashRaceWidget(self)
        self.tab_widget.addTab(hash_race, "‚ö° Hash Race")
        
        network_security = NetworkSecurityWidget(self)
        self.tab_widget.addTab(network_security, "üåê B·∫£o M·∫≠t M·∫°ng")
        
    def create_main_game_tab(self):
        """T·∫°o tab game ch√≠nh"""
        widget = QWidget()
        layout = QHBoxLayout(widget)
        
        # Sender panel
        sender_panel = self.create_sender_panel()
        layout.addWidget(sender_panel)
        
        # Receiver panel  
        receiver_panel = self.create_receiver_panel()
        layout.addWidget(receiver_panel)
        
        # Tools panel
        tools_panel = self.create_tools_panel()
        layout.addWidget(tools_panel)
        
        return widget
        
    def create_sender_panel(self):
        """T·∫°o panel b√™n g·ª≠i"""
        group = QGroupBox("üè¶ B√™n G·ª≠i (Ng√¢n H√†ng)")
        layout = QVBoxLayout(group)
        
        # AES Key
        layout.addWidget(QLabel("üîë Kh√≥a AES (256-bit)"))
        self.aes_key_input = QLineEdit()
        self.aes_key_input.setReadOnly(True)
        layout.addWidget(self.aes_key_input)
        
        generate_key_btn = QPushButton("üîë T·∫°o kh√≥a AES")
        generate_key_btn.clicked.connect(self.generate_aes_key)
        layout.addWidget(generate_key_btn)
        
        # Sender account
        layout.addWidget(QLabel("üí≥ S·ªë t√†i kho·∫£n ng∆∞·ªùi g·ª≠i"))
        self.sender_account = QLineEdit()
        self.sender_account.setPlaceholderText("VD: 1234567890123")
        layout.addWidget(self.sender_account)
        
        # Receiver account  
        layout.addWidget(QLabel("üí≥ S·ªë t√†i kho·∫£n ng∆∞·ªùi nh·∫≠n"))
        self.receiver_account = QLineEdit()
        self.receiver_account.setPlaceholderText("VD: 9876543210987")
        layout.addWidget(self.receiver_account)
        
        # Amount
        layout.addWidget(QLabel("üí∞ S·ªë ti·ªÅn (VND)"))
        self.amount_input = QLineEdit()
        self.amount_input.setPlaceholderText("VD: 1000000")
        layout.addWidget(self.amount_input)
        
        # Description
        layout.addWidget(QLabel("üìù N·ªôi dung chuy·ªÉn kho·∫£n"))
        self.description_input = QLineEdit()
        self.description_input.setPlaceholderText("VD: Thanh to√°n h√≥a ƒë∆°n")
        layout.addWidget(self.description_input)
        
        # Encrypted data
        layout.addWidget(QLabel("üîí D·ªØ li·ªáu ƒë√£ m√£ h√≥a"))
        self.encrypted_data = QTextEdit()
        self.encrypted_data.setMaximumHeight(100)
        self.encrypted_data.setReadOnly(True)
        layout.addWidget(self.encrypted_data)
        
        # Buttons
        encrypt_btn = QPushButton("üîí M√£ h√≥a d·ªØ li·ªáu")
        encrypt_btn.clicked.connect(self.encrypt_transaction)
        layout.addWidget(encrypt_btn)
        
        send_btn = QPushButton("üì® G·ª≠i giao d·ªãch")
        send_btn.clicked.connect(self.send_transaction)
        layout.addWidget(send_btn)
        
        return group
        
    def create_receiver_panel(self):
        """T·∫°o panel b√™n nh·∫≠n"""
        group = QGroupBox("üè™ B√™n Nh·∫≠n (Merchant)")
        layout = QVBoxLayout(group)
        
        # Decrypt key
        layout.addWidget(QLabel("üîë Kh√≥a gi·∫£i m√£ AES"))
        self.decrypt_key = QLineEdit()
        self.decrypt_key.setPlaceholderText("Nh·∫≠p kh√≥a ƒë·ªÉ gi·∫£i m√£...")
        layout.addWidget(self.decrypt_key)
        
        # Received data
        layout.addWidget(QLabel("üì® D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c"))
        self.received_data = QTextEdit()
        self.received_data.setMaximumHeight(100)
        self.received_data.setReadOnly(True)
        layout.addWidget(self.received_data)
        
        # Decrypted data
        layout.addWidget(QLabel("üîì D·ªØ li·ªáu ƒë√£ gi·∫£i m√£"))
        self.decrypted_data = QTextEdit()
        self.decrypted_data.setMaximumHeight(120)
        self.decrypted_data.setReadOnly(True)
        layout.addWidget(self.decrypted_data)
        
        # OTP section
        otp_layout = QHBoxLayout()
        layout.addWidget(QLabel("üì± M√£ OTP (6 ch·ªØ s·ªë)"))
        self.otp_input = QLineEdit()
        self.otp_input.setPlaceholderText("Nh·∫≠p m√£ OTP...")
        self.otp_input.setMaxLength(6)
        otp_layout.addWidget(self.otp_input)
        
        generate_otp_btn = QPushButton("üì± T·∫°o OTP")
        generate_otp_btn.clicked.connect(self.generate_otp)
        otp_layout.addWidget(generate_otp_btn)
        
        layout.addLayout(otp_layout)
        
        self.otp_display = QLabel()
        self.otp_display.setStyleSheet("color: #FFD700; font-weight: bold; font-size: 14px;")
        layout.addWidget(self.otp_display)
        
        # Buttons
        decrypt_btn = QPushButton("üîì Gi·∫£i m√£ d·ªØ li·ªáu")
        decrypt_btn.clicked.connect(self.decrypt_transaction)
        layout.addWidget(decrypt_btn)
        
        verify_btn = QPushButton("‚úÖ X√°c th·ª±c giao d·ªãch")
        verify_btn.clicked.connect(self.verify_transaction)
        layout.addWidget(verify_btn)
        
        return group
        
    def create_tools_panel(self):
        """T·∫°o panel c√¥ng c·ª•"""
        group = QGroupBox("üõ°Ô∏è C√¥ng c·ª• B·∫£o m·∫≠t")
        layout = QVBoxLayout(group)
        
        # Hash tool
        layout.addWidget(QLabel("üî® T·∫°o Hash SHA-256"))
        self.hash_input = QLineEdit()
        self.hash_input.setPlaceholderText("Nh·∫≠p d·ªØ li·ªáu c·∫ßn hash...")
        layout.addWidget(self.hash_input)
        
        hash_btn = QPushButton("üî® T·∫°o Hash")
        hash_btn.clicked.connect(self.generate_hash)
        layout.addWidget(hash_btn)
        
        self.hash_output = QLineEdit()
        self.hash_output.setReadOnly(True)
        layout.addWidget(self.hash_output)
        
        # Transaction history
        layout.addWidget(QLabel("üìä L·ªãch s·ª≠ giao d·ªãch"))
        self.transaction_history = QListWidget()
        self.transaction_history.setMaximumHeight(200)
        layout.addWidget(self.transaction_history)
        
        return group
        
    def load_stylesheet(self):
        """Load stylesheet t·ª´ file QSS"""
        try:
            with open('modern_bank_style.qss', 'r', encoding='utf-8') as f:
                self.setStyleSheet(f.read())
        except FileNotFoundError:
            # Fallback stylesheet
            self.setStyleSheet("""
                QMainWindow {
                    background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                        stop:0 #0f1419, stop:0.5 #1a2332, stop:1 #0f1419);
                    color: #ffffff;
                }
                
                #GameHeader {
                    background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                        stop:0 rgba(30, 50, 80, 0.9), stop:1 rgba(20, 35, 60, 0.9));
                    border: 2px solid rgba(30, 136, 229, 0.3);
                    border-radius: 15px;
                }
                
                #GameTitle {
                    font-size: 32px;
                    font-weight: bold;
                    color: #FFD700;
                }
                
                #GameSubtitle {
                    font-size: 16px;
                    color: #b0bec5;
                }
                
                QPushButton {
                    background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                        stop:0 #2d5aa0, stop:1 #1e88e5);
                    color: white;
                    border: 2px solid rgba(255, 255, 255, 0.1);
                    border-radius: 8px;
                    padding: 8px 16px;
                    font-weight: bold;
                }
                
                QPushButton:hover {
                    background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                        stop:0 #3d6bb0, stop:1 #2e98f5);
                }
                
                QLineEdit, QTextEdit {
                    background: rgba(40, 60, 90, 0.8);
                    border: 2px solid rgba(30, 136, 229, 0.3);
                    border-radius: 8px;
                    padding: 8px;
                    color: white;
                }
                
                QLineEdit:focus, QTextEdit:focus {
                    border-color: #1e88e5;
                }
                
                QGroupBox {
                    font-weight: bold;
                    border: 2px solid rgba(30, 136, 229, 0.3);
                    border-radius: 8px;
                    margin-top: 10px;
                    padding-top: 10px;
                }
                
                QGroupBox::title {
                    color: #1e88e5;
                    subcontrol-origin: margin;
                    left: 10px;
                    padding: 0 5px 0 5px;
                }
                
                #StatCard {
                    background: rgba(30, 50, 80, 0.9);
                    border: 2px solid rgba(30, 136, 229, 0.3);
                    border-radius: 10px;
                    padding: 10px;
                }
            """)
    
    # Game logic methods
    def generate_aes_key(self):
        """T·∫°o kh√≥a AES m·ªõi"""
        key = ''.join(random.choices(string.ascii_letters + string.digits, k=32))
        self.game_state['currentAESKey'] = key
        self.aes_key_input.setText(key)
        self.add_score(10, "T·∫°o kh√≥a AES th√†nh c√¥ng")
        
    def encrypt_transaction(self):
        """M√£ h√≥a giao d·ªãch"""
        sender = self.sender_account.text()
        receiver = self.receiver_account.text()
        amount = self.amount_input.text()
        description = self.description_input.text()
        key = self.aes_key_input.text()
        
        if not all([sender, receiver, amount, description, key]):
            self.show_notification("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!", error=True)
            return
            
        # Validate inputs
        if not sender.isdigit() or len(sender) < 9:
            self.show_notification("S·ªë t√†i kho·∫£n ng∆∞·ªùi g·ª≠i kh√¥ng h·ª£p l·ªá!", error=True)
            return
            
        if not receiver.isdigit() or len(receiver) < 9:
            self.show_notification("S·ªë t√†i kho·∫£n ng∆∞·ªùi nh·∫≠n kh√¥ng h·ª£p l·ªá!", error=True)
            return
            
        try:
            amount_val = int(amount)
            if amount_val < 1000:
                self.show_notification("S·ªë ti·ªÅn t·ªëi thi·ªÉu l√† 1,000 VND!", error=True)
                return
        except ValueError:
            self.show_notification("S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!", error=True)
            return
            
        # Create transaction data
        transaction_data = {
            'sender': sender,
            'receiver': receiver,
            'amount': amount_val,
            'description': description,
            'timestamp': datetime.now().isoformat()
        }
        
        try:
            encrypted = encrypt_aes(json.dumps(transaction_data), key)
            self.encrypted_data.setText(encrypted)
            self.add_score(20, "M√£ h√≥a giao d·ªãch th√†nh c√¥ng")
            self.show_notification("D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c m√£ h√≥a th√†nh c√¥ng!")
        except Exception as e:
            self.show_notification(f"L·ªói m√£ h√≥a: {str(e)}", error=True)
            
    def send_transaction(self):
        """G·ª≠i giao d·ªãch"""
        encrypted = self.encrypted_data.toPlainText()
        if not encrypted:
            self.show_notification("Vui l√≤ng m√£ h√≥a d·ªØ li·ªáu tr∆∞·ªõc khi g·ª≠i!", error=True)
            return
            
        self.received_data.setText(encrypted)
        self.add_score(15, "G·ª≠i giao d·ªãch th√†nh c√¥ng")
        self.show_notification("Giao d·ªãch ƒë√£ ƒë∆∞·ª£c g·ª≠i!")
        
    def decrypt_transaction(self):
        """Gi·∫£i m√£ giao d·ªãch"""
        encrypted = self.received_data.toPlainText()
        key = self.decrypt_key.text()
        
        if not encrypted or not key:
            self.show_notification("Vui l√≤ng nh·∫≠p d·ªØ li·ªáu v√† kh√≥a gi·∫£i m√£!", error=True)
            return
            
        try:
            decrypted = decrypt_aes(encrypted, key)
            self.decrypted_data.setText(decrypted)
            self.add_score(30, "Gi·∫£i m√£ th√†nh c√¥ng")
            self.show_notification("D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c gi·∫£i m√£ th√†nh c√¥ng!")
        except Exception as e:
            self.show_notification("L·ªói gi·∫£i m√£: Kh√≥a kh√¥ng ch√≠nh x√°c!", error=True)
            
    def generate_otp(self):
        """T·∫°o m√£ OTP"""
        otp = ''.join(random.choices(string.digits, k=6))
        self.game_state['currentOTP'] = otp
        self.otp_display.setText(f"M√£ OTP: {otp}")
        
        # Auto expire after 2 minutes
        QTimer.singleShot(120000, lambda: self.otp_display.setText("M√£ OTP ƒë√£ h·∫øt h·∫°n"))
        
        self.show_notification("M√£ OTP ƒë√£ ƒë∆∞·ª£c t·∫°o!")
        
    def verify_transaction(self):
        """X√°c th·ª±c giao d·ªãch"""
        otp_input = self.otp_input.text()
        decrypted = self.decrypted_data.toPlainText()
        
        if not decrypted:
            self.show_notification("Vui l√≤ng gi·∫£i m√£ d·ªØ li·ªáu tr∆∞·ªõc!", error=True)
            return
            
        if not otp_input:
            self.show_notification("Vui l√≤ng nh·∫≠p m√£ OTP!", error=True)
            return
            
        if otp_input != self.game_state['currentOTP']:
            self.show_notification("M√£ OTP kh√¥ng ch√≠nh x√°c!", error=True)
            return
            
        # Transaction successful
        self.game_state['completedTransactions'] += 1
        self.game_state['streak'] += 1
        
        bonus_points = 100 + (self.game_state['currentLevel'] * 20) + (self.game_state['streak'] * 10)
        self.add_score(bonus_points, f"Ho√†n th√†nh giao d·ªãch (Level {self.game_state['currentLevel']})")
        
        # Add to history
        transaction = {
            'id': self.game_state['completedTransactions'],
            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'data': decrypted,
            'level': self.game_state['currentLevel']
        }
        self.game_state['transactionHistory'].append(transaction)
        self.update_transaction_history()
        
        # Level up check
        if self.game_state['completedTransactions'] % 5 == 0:
            self.level_up()
            
        self.show_notification("üéâ Giao d·ªãch ho√†n th√†nh th√†nh c√¥ng!")
        
        # Reset form
        QTimer.singleShot(2000, self.reset_transaction_form)
        
    def level_up(self):
        """L√™n c·∫•p"""
        self.game_state['currentLevel'] += 1
        self.game_state['achievements'] += 1
        self.add_score(self.game_state['currentLevel'] * 50, f"L√™n c·∫•p {self.game_state['currentLevel']}!")
        self.show_notification(f"üÜô Ch√∫c m·ª´ng! B·∫°n ƒë√£ l√™n Level {self.game_state['currentLevel']}!")
        
    def reset_transaction_form(self):
        """Reset form giao d·ªãch"""
        self.sender_account.clear()
        self.receiver_account.clear()
        self.amount_input.clear()
        self.description_input.clear()
        self.encrypted_data.clear()
        self.received_data.clear()
        self.decrypted_data.clear()
        self.decrypt_key.clear()
        self.otp_input.clear()
        self.otp_display.clear()
        
        # Generate new AES key
        self.generate_aes_key()
        
    def generate_hash(self):
        """T·∫°o hash SHA-256"""
        input_text = self.hash_input.text()
        if not input_text:
            self.show_notification("Vui l√≤ng nh·∫≠p d·ªØ li·ªáu ƒë·ªÉ hash!", error=True)
            return
            
        hash_result = create_hash(input_text)
        self.hash_output.setText(hash_result)
        self.add_score(5, "T·∫°o hash th√†nh c√¥ng")
        self.show_notification("Hash ƒë√£ ƒë∆∞·ª£c t·∫°o!")
        
    def update_transaction_history(self):
        """C·∫≠p nh·∫≠t l·ªãch s·ª≠ giao d·ªãch"""
        self.transaction_history.clear()
        
        for transaction in self.game_state['transactionHistory'][-10:]:  # Show last 10
            item_text = f"Giao d·ªãch #{transaction['id']} - Level {transaction['level']} ({transaction['timestamp']})"
            self.transaction_history.addItem(item_text)
            
    def add_score(self, points, reason=""):
        """Th√™m ƒëi·ªÉm"""
        self.game_state['totalScore'] += points
        self.update_stats_display()
        self.show_notification(f"+{points} ƒëi·ªÉm! {reason}")
        self.save_game_state()
        
    def update_stats_display(self):
        """C·∫≠p nh·∫≠t hi·ªÉn th·ªã th·ªëng k√™"""
        self.stats_widget.update_stats(self.game_state)
        
    def show_notification(self, message, error=False):
        """Hi·ªÉn th·ªã th√¥ng b√°o"""
        msg_box = QMessageBox()
        msg_box.setWindowTitle("Th√¥ng b√°o")
        msg_box.setText(message)
        
        if error:
            msg_box.setIcon(QMessageBox.Critical)
        else:
            msg_box.setIcon(QMessageBox.Information)
            
        msg_box.exec()
        
    def save_game_state(self):
        """L∆∞u tr·∫°ng th√°i game"""
        try:
            with open('game_save.json', 'w', encoding='utf-8') as f:
                json.dump(self.game_state, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"Error saving game state: {e}")
            
    def load_game_state(self):
        """Load tr·∫°ng th√°i game"""
        try:
            if os.path.exists('game_save.json'):
                with open('game_save.json', 'r', encoding='utf-8') as f:
                    saved_state = json.load(f)
                    self.game_state.update(saved_state)
                    self.update_stats_display()
                    self.update_transaction_history()
        except Exception as e:
            print(f"Error loading game state: {e}")

def main():
    """H√†m ch√≠nh"""
    app = QApplication(sys.argv)
    
    # Set application properties
    app.setApplicationName("SecureBank Pro")
    app.setApplicationVersion("2.0")
    app.setOrganizationName("SecureBank Team")
    
    # Create and show main window
    game = BankSecurityGame()
    game.show()
    
    sys.exit(app.exec())

if __name__ == '__main__':
    main()